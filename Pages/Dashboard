import React, { useState, useEffect } from "react";
import { Link, useNavigate } from "react-router-dom";
import { createPageUrl } from "@/utils";
import { User } from "@/entities/User";
import { Product } from "@/entities/Product";
import { Order } from "@/entities/Order";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Badge } from "@/components/ui/badge";
import { Heart, Plus, ShoppingBag, Package, TrendingUp, Mic, Camera, Eye } from "lucide-react";

export default function Dashboard() {
  const navigate = useNavigate();
  const [user, setUser] = useState(null);
  const [products, setProducts] = useState([]);
  const [orders, setOrders] = useState([]);
  const [stats, setStats] = useState({
    totalProducts: 0,
    totalOrders: 0,
    totalRevenue: 0,
    pendingOrders: 0
  });

  useEffect(() => {
    const loadData = async () => {
      try {
        const currentUser = await User.me();
        setUser(currentUser);
        
        if (currentUser.user_type === "artisan" || currentUser.user_type === "both") {
          const userProducts = await Product.filter({ artisan_id: currentUser.id });
          setProducts(userProducts);
          
          const userOrders = await Order.filter({ artisan_id: currentUser.id });
          setOrders(userOrders);
          
          setStats({
            totalProducts: userProducts.length,
            totalOrders: userOrders.length,
            totalRevenue: userOrders.reduce((sum, order) => sum + (order.price || 0), 0),
            pendingOrders: userOrders.filter(order => order.status === "ordered" || order.status === "confirmed").length
          });
        } else {
          const userOrders = await Order.filter({ buyer_id: currentUser.id });
          setOrders(userOrders);
          setStats({
            totalOrders: userOrders.length,
            pendingOrders: userOrders.filter(order => !["delivered", "cancelled"].includes(order.status)).length
          });
        }
      } catch (error) {
        console.error("Failed to load dashboard data, redirecting to sign in:", error);
        navigate(createPageUrl('SignIn'));
      }
    };
    
    loadData();
  }, [navigate]);

  const isArtisan = user?.user_type === "artisan" || user?.user_type === "both";
  const isBuyer = user?.user_type === "buyer" || user?.user_type === "both";

  if (!user) {
    return (
      <div className="min-h-screen flex items-center justify-center">
        <div className="text-center">
          <div className="w-12 h-12 mx-auto mb-4 rounded-full animate-spin border-4 border-blue-500 border-t-transparent"></div>
          <p className="text-gray-600">Loading dashboard...</p>
        </div>
      </div>
    );
  }

  return (
    <div className="p-6 max-w-7xl mx-auto">
      {/* Welcome Section */}
      <div className="mb-8">
        <div className="bg-white rounded-xl shadow-sm border border-gray-100 p-6">
          <div className="flex flex-col md:flex-row justify-between items-start md:items-center gap-4">
            <div>
              <h1 className="text-2xl font-bold text-gray-900 mb-2">
                Welcome back, {user.full_name}! ðŸŽ¨
              </h1>
              <p className="text-gray-600 text-lg">
                {isArtisan ? "Ready to showcase your crafts to the world?" : "Discover amazing handmade treasures today"}
              </p>
            </div>
            
            {/* Voice Command Button */}
            <button 
              className="p-4 bg-gradient-to-r from-blue-500 to-indigo-500 text-white rounded-xl shadow-md hover:shadow-lg transition-all transform hover:scale-105"
              aria-label="Voice command"
            >
              <Mic className="w-6 h-6" />
            </button>
          </div>
        </div>
      </div>

      {/* Quick Stats */}
      <div className="grid grid-cols-2 md:grid-cols-4 gap-4 mb-8">
        {isArtisan && (
          <>
            <Card className="border-gray-100">
              <CardContent className="p-4">
                <div className="flex items-center justify-between">
                  <div>
                    <p className="text-sm font-medium text-gray-600">Products</p>
                    <p className="text-2xl font-bold text-gray-900">{stats.totalProducts}</p>
                  </div>
                  <Heart className="w-8 h-8 text-blue-500" />
                </div>
              </CardContent>
            </Card>

            <Card className="border-gray-100">
              <CardContent className="p-4">
                <div className="flex items-center justify-between">
                  <div>
                    <p className="text-sm font-medium text-gray-600">Revenue</p>
                    <p className="text-2xl font-bold text-gray-900">${stats.totalRevenue.toFixed(2)}</p>
                  </div>
                  <TrendingUp className="w-8 h-8 text-green-500" />
                </div>
              </CardContent>
            </Card>
          </>
        )}

        <Card className="border-gray-100">
          <CardContent className="p-4">
            <div className="flex items-center justify-between">
              <div>
                <p className="text-sm font-medium text-gray-600">Orders</p>
                <p className="text-2xl font-bold text-gray-900">{stats.totalOrders}</p>
              </div>
              <Package className="w-8 h-8 text-orange-500" />
            </div>
          </CardContent>
        </Card>

        <Card className="border-gray-100">
          <CardContent className="p-4">
            <div className="flex items-center justify-between">
              <div>
                <p className="text-sm font-medium text-gray-600">Pending</p>
                <p className="text-2xl font-bold text-gray-900">{stats.pendingOrders}</p>
              </div>
              <Package className="w-8 h-8 text-red-500" />
            </div>
          </CardContent>
        </Card>
      </div>

      {/* Action Cards */}
      <div className="grid md:grid-cols-2 lg:grid-cols-3 gap-6 mb-8">
        {/* Artisan Actions */}
        {isArtisan && (
          <>
            <Card className="border-gray-100 hover:shadow-md transition-shadow">
              <CardContent className="p-6">
                <div className="text-center">
                  <div className="w-16 h-16 mx-auto mb-4 bg-gradient-to-r from-blue-500 to-indigo-500 rounded-xl flex items-center justify-center">
                    <Mic className="w-8 h-8 text-white" />
                  </div>
                  <h3 className="text-xl font-semibold mb-2">Voice List Product</h3>
                  <p className="text-gray-600 mb-4">Describe your product with voice and let AI create the listing</p>
                  <Link to={createPageUrl("CreateProduct")}>
                    <Button className="w-full bg-blue-500 hover:bg-blue-600">
                      Start Voice Listing
                    </Button>
                  </Link>
                </div>
              </CardContent>
            </Card>

            <Card className="border-gray-100 hover:shadow-md transition-shadow">
              <CardContent className="p-6">
                <div className="text-center">
                  <div className="w-16 h-16 mx-auto mb-4 bg-gradient-to-r from-purple-500 to-pink-500 rounded-xl flex items-center justify-center">
                    <Camera className="w-8 h-8 text-white" />
                  </div>
                  <h3 className="text-xl font-semibold mb-2">Photo Enhancement</h3>
                  <p className="text-gray-600 mb-4">Take photos and enhance them with AI background removal</p>
                  <Link to={createPageUrl("CreateProduct")}>
                    <Button className="w-full bg-purple-500 hover:bg-purple-600">
                      Enhance Photos
                    </Button>
                  </Link>
                </div>
              </CardContent>
            </Card>

            <Card className="border-gray-100 hover:shadow-md transition-shadow">
              <CardContent className="p-6">
                <div className="text-center">
                  <div className="w-16 h-16 mx-auto mb-4 bg-gradient-to-r from-green-500 to-emerald-500 rounded-xl flex items-center justify-center">
                    <Eye className="w-8 h-8 text-white" />
                  </div>
                  <h3 className="text-xl font-semibold mb-2">My Products</h3>
                  <p className="text-gray-600 mb-4">View and manage your product listings</p>
                  <Link to={createPageUrl("ArtisanDashboard")}>
                    <Button className="w-full bg-green-500 hover:bg-green-600">
                      View Products
                    </Button>
                  </Link>
                </div>
              </CardContent>
            </Card>
          </>
        )}

        {/* Buyer Actions */}
        {isBuyer && (
          <Card className="border-gray-100 hover:shadow-md transition-shadow">
            <CardContent className="p-6">
              <div className="text-center">
                <div className="w-16 h-16 mx-auto mb-4 bg-gradient-to-r from-amber-500 to-orange-500 rounded-xl flex items-center justify-center">
                  <ShoppingBag className="w-8 h-8 text-white" />
                </div>
                <h3 className="text-xl font-semibold mb-2">Explore Marketplace</h3>
                <p className="text-gray-600 mb-4">Discover unique handmade items from talented artisans</p>
                <Link to={createPageUrl("Marketplace")}>
                  <Button className="w-full bg-amber-500 hover:bg-amber-600">
                    Browse Products
                  </Button>
                </Link>
              </div>
            </CardContent>
          </Card>
        )}
      </div>

      {/* Recent Activity */}
      <div className="grid lg:grid-cols-2 gap-6">
        {/* Recent Products */}
        {isArtisan && products.length > 0 && (
          <Card className="border-gray-100">
            <CardHeader>
              <CardTitle className="flex items-center gap-2">
                <Heart className="w-5 h-5 text-blue-500" />
                Recent Products
              </CardTitle>
            </CardHeader>
            <CardContent>
              <div className="space-y-3">
                {products.slice(0, 3).map((product) => (
                  <div key={product.id} className="flex items-center gap-3 p-3 bg-gray-50 rounded-lg">
                    <div className="w-12 h-12 rounded-lg bg-gray-200 flex items-center justify-center overflow-hidden">
                      {product.image_url ? (
                        <img 
                          src={product.image_url} 
                          alt={product.title}
                          className="w-full h-full object-cover"
                        />
                      ) : (
                        <Heart className="w-6 h-6 text-gray-400" />
                      )}
                    </div>
                    <div className="flex-1">
                      <h4 className="font-medium text-gray-900">{product.title}</h4>
                      <div className="flex items-center gap-2 mt-1">
                        <span className="font-semibold text-green-600">${product.price}</span>
                        <Badge variant="secondary" className="text-xs">
                          {product.category}
                        </Badge>
                      </div>
                    </div>
                  </div>
                ))}
              </div>
            </CardContent>
          </Card>
        )}

        {/* Recent Orders */}
        {orders.length > 0 && (
          <Card className="border-gray-100">
            <CardHeader>
              <CardTitle className="flex items-center gap-2">
                <Package className="w-5 h-5 text-orange-500" />
                Recent Orders
              </CardTitle>
            </CardHeader>
            <CardContent>
              <div className="space-y-3">
                {orders.slice(0, 3).map((order) => (
                  <div key={order.id} className="flex items-center justify-between p-3 bg-gray-50 rounded-lg">
                    <div>
                      <h4 className="font-medium text-gray-900">{order.product_title}</h4>
                      <p className="font-semibold text-green-600">${order.price}</p>
                    </div>
                    <Badge 
                      className={
                        order.status === "delivered" ? "bg-green-100 text-green-800" :
                        order.status === "shipped" ? "bg-blue-100 text-blue-800" :
                        order.status === "packed" ? "bg-orange-100 text-orange-800" : 
                        "bg-yellow-100 text-yellow-800"
                      }
                    >
                      {order.status}
                    </Badge>
                  </div>
                ))}
              </div>
            </CardContent>
          </Card>
        )}
      </div>
    </div>
  );
}