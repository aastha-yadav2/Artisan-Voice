import React, { useState, useRef } from "react";
import { UploadFile, GenerateImage } from "@/integrations/Core";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Badge } from "@/components/ui/badge";
import { Camera, Upload, ArrowLeft, ArrowRight, Wand2, X, Check } from "lucide-react";

export default function ImageCapture({ productData, onComplete, onBack }) {
  const [images, setImages] = useState([]);
  const [isProcessing, setIsProcessing] = useState(false);
  const [selectedImage, setSelectedImage] = useState(null);
  const fileInputRef = useRef(null);
  const cameraInputRef = useRef(null);

  const handleFileUpload = async (files) => {
    setIsProcessing(true);
    try {
      const uploadPromises = Array.from(files).map(async (file) => {
        const { file_url } = await UploadFile({ file });
        return {
          id: Date.now() + Math.random(),
          url: file_url,
          file: file,
          isOriginal: true
        };
      });
      
      const uploadedImages = await Promise.all(uploadPromises);
      setImages(prev => [...prev, ...uploadedImages]);
    } catch (error) {
      console.error("Failed to upload images:", error);
    } finally {
      setIsProcessing(false);
    }
  };

  const enhanceImage = async (imageData) => {
    setIsProcessing(true);
    try {
      // For demo purposes, we'll simulate enhancement by generating an improved version
      const enhancedResult = await GenerateImage({
        prompt: `Professional product photography of ${productData.title}, clean white background, high quality, well-lit, detailed craftsmanship visible, commercial photography style`
      });
      
      const enhancedImage = {
        id: Date.now() + Math.random(),
        url: enhancedResult.url,
        isOriginal: false,
        isEnhanced: true,
        originalId: imageData.id
      };
      
      setImages(prev => [...prev, enhancedImage]);
    } catch (error) {
      console.error("Failed to enhance image:", error);
    } finally {
      setIsProcessing(false);
    }
  };

  const removeImage = (imageId) => {
    setImages(prev => prev.filter(img => img.id !== imageId));
    if (selectedImage?.id === imageId) {
      setSelectedImage(null);
    }
  };

  const handleContinue = () => {
    if (!selectedImage) return;
    
    onComplete({
      image_url: selectedImage.url,
      original_image_url: selectedImage.isEnhanced ? 
        images.find(img => img.id === selectedImage.originalId)?.url : selectedImage.url,
      enhanced_image_url: selectedImage.isEnhanced ? selectedImage.url : null
    });
  };

  return (
    <div className="p-4 md:p-8 max-w-4xl mx-auto">
      <div className="flex items-center gap-4 mb-6">
        <Button variant="outline" size="icon" onClick={onBack}>
          <ArrowLeft className="w-4 h-4" />
        </Button>
        <div>
          <h1 className="text-2xl md:text-3xl font-bold text-gray-900">Add Product Photos</h1>
          <p className="text-gray-600">Capture or upload photos of your {productData.title}</p>
        </div>
      </div>

      <div className="space-y-6">
        {/* Upload Options */}
        <Card className="border-none shadow-lg">
          <CardHeader>
            <CardTitle className="flex items-center gap-2">
              <Camera className="w-5 h-5 text-purple-500" />
              Add Photos
            </CardTitle>
          </CardHeader>
          <CardContent>
            <div className="grid md:grid-cols-2 gap-4">
              {/* Camera Capture */}
              <div className="border-2 border-dashed border-purple-200 rounded-xl p-6 hover:border-purple-300 transition-all">
                <div className="text-center">
                  <div className="w-16 h-16 mx-auto mb-4 bg-gradient-to-br from-purple-500 to-pink-500 rounded-full flex items-center justify-center">
                    <Camera className="w-8 h-8 text-white" />
                  </div>
                  <h3 className="font-semibold text-lg mb-2">Take Photo</h3>
                  <p className="text-gray-600 mb-4">Use your camera to capture your product</p>
                  <input
                    ref={cameraInputRef}
                    type="file"
                    accept="image/*"
                    capture="environment"
                    multiple
                    onChange={(e) => handleFileUpload(e.target.files)}
                    className="hidden"
                  />
                  <Button 
                    onClick={() => cameraInputRef.current?.click()}
                    className="w-full bg-gradient-to-r from-purple-500 to-pink-500"
                    disabled={isProcessing}
                  >
                    Open Camera
                  </Button>
                </div>
              </div>

              {/* File Upload */}
              <div className="border-2 border-dashed border-blue-200 rounded-xl p-6 hover:border-blue-300 transition-all">
                <div className="text-center">
                  <div className="w-16 h-16 mx-auto mb-4 bg-gradient-to-br from-blue-500 to-cyan-500 rounded-full flex items-center justify-center">
                    <Upload className="w-8 h-8 text-white" />
                  </div>
                  <h3 className="font-semibold text-lg mb-2">Upload Files</h3>
                  <p className="text-gray-600 mb-4">Choose photos from your device</p>
                  <input
                    ref={fileInputRef}
                    type="file"
                    accept="image/*"
                    multiple
                    onChange={(e) => handleFileUpload(e.target.files)}
                    className="hidden"
                  />
                  <Button 
                    onClick={() => fileInputRef.current?.click()}
                    variant="outline"
                    className="w-full border-blue-500 text-blue-500 hover:bg-blue-50"
                    disabled={isProcessing}
                  >
                    Browse Files
                  </Button>
                </div>
              </div>
            </div>
          </CardContent>
        </Card>

        {/* Uploaded Images */}
        {images.length > 0 && (
          <Card className="border-none shadow-lg">
            <CardHeader>
              <CardTitle className="flex items-center justify-between">
                <span className="flex items-center gap-2">
                  ðŸ“¸ Your Photos ({images.length})
                </span>
                {selectedImage && (
                  <Badge className="bg-green-100 text-green-700">
                    <Check className="w-3 h-3 mr-1" />
                    Photo Selected
                  </Badge>
                )}
              </CardTitle>
            </CardHeader>
            <CardContent>
              <div className="grid grid-cols-2 md:grid-cols-3 gap-4">
                {images.map((image) => (
                  <div 
                    key={image.id}
                    className={`relative group cursor-pointer transition-all ${
                      selectedImage?.id === image.id 
                        ? "ring-4 ring-orange-500 ring-offset-2" 
                        : ""
                    }`}
                    onClick={() => setSelectedImage(image)}
                  >
                    <div className="aspect-square bg-gray-100 rounded-lg overflow-hidden">
                      <img 
                        src={image.url} 
                        alt="Product"
                        className="w-full h-full object-cover group-hover:scale-105 transition-transform"
                      />
                    </div>
                    
                    {/* Image badges */}
                    <div className="absolute top-2 left-2">
                      {image.isEnhanced && (
                        <Badge className="bg-purple-100 text-purple-700 text-xs">
                          <Wand2 className="w-3 h-3 mr-1" />
                          Enhanced
                        </Badge>
                      )}
                      {image.isOriginal && !image.isEnhanced && (
                        <Badge variant="secondary" className="text-xs">
                          Original
                        </Badge>
                      )}
                    </div>

                    {/* Action buttons */}
                    <div className="absolute top-2 right-2 opacity-0 group-hover:opacity-100 transition-opacity">
                      <div className="flex gap-1">
                        {image.isOriginal && (
                          <Button
                            size="sm"
                            variant="secondary"
                            onClick={(e) => {
                              e.stopPropagation();
                              enhanceImage(image);
                            }}
                            disabled={isProcessing}
                            className="h-8 w-8 p-0"
                          >
                            <Wand2 className="w-3 h-3" />
                          </Button>
                        )}
                        <Button
                          size="sm"
                          variant="destructive"
                          onClick={(e) => {
                            e.stopPropagation();
                            removeImage(image.id);
                          }}
                          className="h-8 w-8 p-0"
                        >
                          <X className="w-3 h-3" />
                        </Button>
                      </div>
                    </div>

                    {/* Selection indicator */}
                    {selectedImage?.id === image.id && (
                      <div className="absolute bottom-2 right-2">
                        <div className="w-6 h-6 bg-orange-500 rounded-full flex items-center justify-center">
                          <Check className="w-4 h-4 text-white" />
                        </div>
                      </div>
                    )}
                  </div>
                ))}
              </div>

              {isProcessing && (
                <div className="text-center py-4">
                  <div className="inline-flex items-center gap-2 text-purple-600">
                    <div className="w-4 h-4 border-2 border-purple-600 border-t-transparent rounded-full animate-spin"></div>
                    Processing images...
                  </div>
                </div>
              )}

              <div className="mt-6 flex justify-between items-center">
                <p className="text-sm text-gray-600">
                  Select a photo to continue. Tip: Enhanced photos often perform better!
                </p>
                
                <Button 
                  onClick={handleContinue}
                  disabled={!selectedImage}
                  size="lg"
                  className="bg-gradient-to-r from-orange-500 to-red-500 hover:from-orange-600 hover:to-red-600"
                >
                  Continue to Preview
                  <ArrowRight className="w-5 h-5 ml-2" />
                </Button>
              </div>
            </CardContent>
          </Card>
        )}
      </div>
    </div>
  );
}