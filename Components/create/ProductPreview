import React, { useState } from "react";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Textarea } from "@/components/ui/textarea";
import { Badge } from "@/components/ui/badge";
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select";
import { ArrowLeft, Save, Edit, Check } from "lucide-react";

const categories = [
  "textiles", "pottery", "jewelry", "woodwork", "metalwork", 
  "paintings", "sculptures", "crafts", "other"
];

export default function ProductPreview({ productData, onSave, onBack, isLoading }) {
  const [editedData, setEditedData] = useState({
    title: productData.title || "",
    description: productData.description || "",
    price: productData.price || 0,
    category: productData.category || "crafts",
    tags: productData.tags || [],
    image_url: productData.image_url || "",
    original_image_url: productData.original_image_url || "",
    enhanced_image_url: productData.enhanced_image_url || ""
  });

  const [isEditing, setIsEditing] = useState(false);
  const [newTag, setNewTag] = useState("");

  const handleInputChange = (field, value) => {
    setEditedData(prev => ({
      ...prev,
      [field]: value
    }));
  };

  const addTag = () => {
    if (newTag.trim() && !editedData.tags.includes(newTag.trim())) {
      setEditedData(prev => ({
        ...prev,
        tags: [...prev.tags, newTag.trim()]
      }));
      setNewTag("");
    }
  };

  const removeTag = (tagToRemove) => {
    setEditedData(prev => ({
      ...prev,
      tags: prev.tags.filter(tag => tag !== tagToRemove)
    }));
  };

  const handleSave = () => {
    onSave(editedData);
  };

  return (
    <div className="p-4 md:p-8 max-w-4xl mx-auto">
      <div className="flex items-center gap-4 mb-6">
        <Button variant="outline" size="icon" onClick={onBack} disabled={isLoading}>
          <ArrowLeft className="w-4 h-4" />
        </Button>
        <div>
          <h1 className="text-2xl md:text-3xl font-bold text-gray-900">Review Your Product</h1>
          <p className="text-gray-600">Check everything looks good before publishing</p>
        </div>
      </div>

      <div className="grid lg:grid-cols-2 gap-8">
        {/* Product Image */}
        <Card className="border-none shadow-lg">
          <CardContent className="p-0">
            <div className="aspect-square bg-gray-100 rounded-lg overflow-hidden">
              {editedData.image_url ? (
                <img 
                  src={editedData.image_url} 
                  alt={editedData.title}
                  className="w-full h-full object-cover"
                />
              ) : (
                <div className="w-full h-full flex items-center justify-center text-gray-400">
                  <span>No image selected</span>
                </div>
              )}
            </div>
            {editedData.enhanced_image_url && (
              <div className="p-4">
                <Badge className="bg-purple-100 text-purple-700">
                  ✨ AI Enhanced
                </Badge>
              </div>
            )}
          </CardContent>
        </Card>

        {/* Product Details */}
        <Card className="border-none shadow-lg">
          <CardHeader className="flex flex-row items-center justify-between">
            <CardTitle>Product Details</CardTitle>
            <Button
              variant="outline"
              size="sm"
              onClick={() => setIsEditing(!isEditing)}
              disabled={isLoading}
            >
              <Edit className="w-4 h-4 mr-2" />
              {isEditing ? "View" : "Edit"}
            </Button>
          </CardHeader>
          <CardContent className="space-y-4">
            {/* Title */}
            <div>
              <label className="text-sm font-medium text-gray-700 mb-1 block">Title</label>
              {isEditing ? (
                <Input
                  value={editedData.title}
                  onChange={(e) => handleInputChange("title", e.target.value)}
                  placeholder="Product title"
                />
              ) : (
                <h2 className="text-xl font-semibold text-gray-900">{editedData.title}</h2>
              )}
            </div>

            {/* Price and Category */}
            <div className="grid grid-cols-2 gap-4">
              <div>
                <label className="text-sm font-medium text-gray-700 mb-1 block">Price</label>
                {isEditing ? (
                  <Input
                    type="number"
                    min="0"
                    step="0.01"
                    value={editedData.price}
                    onChange={(e) => handleInputChange("price", parseFloat(e.target.value))}
                    placeholder="0.00"
                  />
                ) : (
                  <p className="text-2xl font-bold text-green-600">${editedData.price}</p>
                )}
              </div>
              <div>
                <label className="text-sm font-medium text-gray-700 mb-1 block">Category</label>
                {isEditing ? (
                  <Select 
                    value={editedData.category} 
                    onValueChange={(value) => handleInputChange("category", value)}
                  >
                    <SelectTrigger>
                      <SelectValue />
                    </SelectTrigger>
                    <SelectContent>
                      {categories.map((category) => (
                        <SelectItem key={category} value={category}>
                          {category.charAt(0).toUpperCase() + category.slice(1)}
                        </SelectItem>
                      ))}
                    </SelectContent>
                  </Select>
                ) : (
                  <Badge className="bg-blue-100 text-blue-800 capitalize">
                    {editedData.category}
                  </Badge>
                )}
              </div>
            </div>

            {/* Description */}
            <div>
              <label className="text-sm font-medium text-gray-700 mb-1 block">Description</label>
              {isEditing ? (
                <Textarea
                  value={editedData.description}
                  onChange={(e) => handleInputChange("description", e.target.value)}
                  rows={4}
                  placeholder="Describe your product..."
                />
              ) : (
                <p className="text-gray-700 leading-relaxed">{editedData.description}</p>
              )}
            </div>

            {/* Tags */}
            <div>
              <label className="text-sm font-medium text-gray-700 mb-1 block">Tags</label>
              {isEditing ? (
                <div className="space-y-2">
                  <div className="flex gap-2">
                    <Input
                      value={newTag}
                      onChange={(e) => setNewTag(e.target.value)}
                      placeholder="Add a tag..."
                      onKeyPress={(e) => e.key === "Enter" && addTag()}
                    />
                    <Button onClick={addTag} size="sm">Add</Button>
                  </div>
                  <div className="flex flex-wrap gap-2">
                    {editedData.tags.map((tag, index) => (
                      <Badge 
                        key={index} 
                        variant="secondary"
                        className="cursor-pointer hover:bg-red-100"
                        onClick={() => removeTag(tag)}
                      >
                        {tag} ×
                      </Badge>
                    ))}
                  </div>
                </div>
              ) : (
                <div className="flex flex-wrap gap-2">
                  {editedData.tags.map((tag, index) => (
                    <Badge key={index} variant="secondary">
                      {tag}
                    </Badge>
                  ))}
                </div>
              )}
            </div>

            {/* Save Button */}
            <div className="pt-6">
              <Button 
                onClick={handleSave}
                disabled={isLoading || !editedData.title || !editedData.price}
                size="lg"
                className="w-full bg-gradient-to-r from-green-500 to-emerald-500 hover:from-green-600 hover:to-emerald-600 text-white shadow-lg hover:shadow-xl transition-all"
              >
                {isLoading ? (
                  <>
                    <div className="w-4 h-4 border-2 border-white border-t-transparent rounded-full animate-spin mr-2"></div>
                    Publishing Product...
                  </>
                ) : (
                  <>
                    <Save className="w-5 h-5 mr-2" />
                    Publish Product
                  </>
                )}
              </Button>
            </div>
          </CardContent>
        </Card>
      </div>
    </div>
  );
}